I"<ol>
  <li>冒泡排序（稳定排序算法，O（n²））
它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序错误就把他们交换过来。
走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。
冒泡排序算法的原理如下：
    <ol>
      <li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
      <li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
      <li>针对所有的元素重复以上的步骤，除了最后一个。</li>
      <li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public void BubbleSort(int[] arr) {
 int len = arr.length;
 if (len &lt;= 0) {
     return;
 }
 for (int j = 0; j &lt; len - 1; j++) {
     for (int i = 0; i &lt; len - 1 - j; i++) {
         if (arr[i] &gt; arr[i + 1]) {
             int temp = arr[i];
             arr[i] = arr[i + 1];
             arr[i + 1] = temp;
         }
     }
 }
 }
</code></pre></div>        </div>
        <hr />
      </li>
    </ol>
  </li>
  <li>选择排序（不稳定排序算法，O（n²））
选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数
据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继
续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public void SelectionSort(int[] arr) {
     int len = arr.length;
     if (len &lt;= 0) {
         return;
     }
     for(int i=0;i&lt;len-1;i++){
         int minVal = i;
         for(int j=i+1;j&lt;=len-1;j++){
             if(arr[j]&lt;arr[minVal]){
                 minVal=j;
             }
         }
         if(minVal!=i){
             int temp = arr[i];
             arr[i]=arr[minVal];
             arr[minVal]=temp;
         }
			
     }
 }
</code></pre></div>    </div>
    <hr />
  </li>
  <li>插入排序（稳定排序算法，O（n²））
插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据。
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static void insertSort(int[] arr){
     int len=arr.length;
     if (len&lt;=1){
         return;
     }
     for (int i=1;i&lt;len;i++){
         int val = arr[i];
         int pos = i;
         while(arr[pos-1]&gt;val){
             arr[pos]=arr[pos-1];
             pos--;
         }
         arr[pos]=val;
     }
 }
</code></pre></div>    </div>
    <hr />
  </li>
  <li>归并排序（稳定的排序算法，O(n log n) ）
归并排序是建立在归并操作上的一种有效的排序算法,该
算法是采用分治法的一个非常典型的应用。
将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。
```
 public static void MergeSort(int[] arr,int start,int end){
     if (start&lt;end){
         int mid = (start+end)»1;
         MergeSort(arr,start,mid);
         MergeSort(arr,mid+1,end);
         Merge(arr,start,mid,end);
     }
 }</li>
</ol>
:ET