I"&<p><strong>题目：</strong></p>

<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。最低公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>

<p><strong>示例：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">输入:</span> 
<span class="n">root</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span><span class="o">],</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="n">q</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nl">输出:</span> <span class="mi">2</span>
<span class="nl">解释:</span> <span class="n">节点</span> <span class="mi">3</span> <span class="n">和节点</span> <span class="mi">1</span> <span class="n">的最近公共祖先是节点</span> <span class="mi">2</span><span class="err">。</span>
</code></pre></div></div>

<p><strong>思路：</strong></p>

<p>利用递归遍历找到分别到两个目标点的路径，然后遍历两个路径，两个路径中最后一个相等的元素就是最低的公共祖先。</p>

<p><strong>代码：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">lowestCommonAncestor</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">p</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">==</span><span class="n">p</span><span class="o">||</span><span class="n">root</span><span class="o">==</span><span class="n">q</span><span class="o">||</span><span class="n">root</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">resList</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span><span class="c1">//存根节点到目标点的路径</span>
        <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">,</span><span class="n">p</span><span class="o">,</span><span class="n">list</span><span class="o">,</span><span class="n">resList</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">pLen</span><span class="o">=</span><span class="n">resList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">pList</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pLen</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">pList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">resList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">resList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">,</span><span class="n">q</span><span class="o">,</span><span class="n">list</span><span class="o">,</span><span class="n">resList</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">qLen</span><span class="o">=</span><span class="n">resList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="nc">TreeNode</span> <span class="n">resNode</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">qLen</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">pList</span><span class="o">.</span><span class="na">size</span><span class="o">()&amp;&amp;</span><span class="n">pList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="n">resList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)){</span>
                <span class="n">resNode</span><span class="o">=</span><span class="n">pList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span><span class="c1">//找到最后一个相等的点</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">resNode</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">preOrder</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span><span class="nc">TreeNode</span> <span class="n">target</span><span class="o">,</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">resList</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">==</span><span class="n">target</span><span class="o">){</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">TreeNode</span> <span class="n">treeNode</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">resList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">treeNode</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span><span class="n">target</span><span class="o">,</span><span class="n">list</span><span class="o">,</span><span class="n">resList</span><span class="o">);</span>
        <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span><span class="n">target</span><span class="o">,</span><span class="n">list</span><span class="o">,</span><span class="n">resList</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

:ET